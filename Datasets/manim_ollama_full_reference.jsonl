{"prompt": "Demonstrate how a square's FadeIn animation can be overridden to instead create the shape from scratch.", "response": "from manim import *\n\nclass MySquare(Square):\n    @override_animation(FadeIn)\n    def _fade_in_override(self, **kwargs):\n        return Create(self, **kwargs)\n\nclass OverrideAnimationExample(Scene):\n    def construct(self):\n        self.play(FadeIn(MySquare()))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.animation.html", "original_name": "animation "}}
{"prompt": "Show surrounding rectangle and add three texts over it with Succession animation.", "response": "from manim import *\n\nclass DefaultAddScene(Scene):\n    def construct(self):\n        text_1 = Text(\"I was added with Add!\")\n        text_2 = Text(\"Me too!\")\n        text_3 = Text(\"And me!\")\n        texts = VGroup(text_1, text_2, text_3).arrange(DOWN)\n        rect = SurroundingRectangle(texts, buff=0.5)\n\n        self.play(\n            Create(rect, run_time=3.0),\n            Succession(\n                Wait(1.0),\n                # You can Add a Mobject in the middle of an animation...\n                Add(text_1),\n                Wait(1.0),\n                # ...or multiple Mobjects at once!\n                Add(text_2, text_3),\n            ),\n        )\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.animation.Add.html", "original_name": "Add "}}
{"prompt": "Demonstrate the animation of dot groups with varying lag ratios and vertical shifts, displaying corresponding text labels.", "response": "from manim import *\n\nclass LagRatios(Scene):\n    def construct(self):\n        ratios = [0, 0.1, 0.5, 1, 2]  # demonstrated lag_ratios\n\n        # Create dot groups\n        group = VGroup(*[Dot() for _ in range(4)]).arrange_submobjects()\n        groups = VGroup(*[group.copy() for _ in ratios]).arrange_submobjects(buff=1)\n        self.add(groups)\n\n        # Label groups\n        self.add(Text(\"lag_ratio = \", font_size=36).next_to(groups, UP, buff=1.5))\n        for group, ratio in zip(groups, ratios):\n            self.add(Text(str(ratio), font_size=36).next_to(group, UP))\n\n        #Animate groups with different lag_ratios\n        self.play(AnimationGroup(*[\n            group.animate(lag_ratio=ratio, run_time=1.5).shift(DOWN * 2)\n            for group, ratio in zip(groups, ratios)\n        ]))\n\n        # lag_ratio also works recursively on nested submobjects:\n        self.play(groups.animate(run_time=1, lag_ratio=0.1).shift(UP * 2))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.animation.Animation.html", "original_name": "Animation "}}
{"prompt": "Demonstrate how to create a square that simultaneously fades in and appears.", "response": "from manim import *\n\nclass MySquare(Square):\n    @override_animation(FadeIn)\n    def _fade_in_override(self, **kwargs):\n        return Create(self, **kwargs)\n\nclass OverrideAnimationExample(Scene):\n    def construct(self):\n        self.play(FadeIn(MySquare()))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.animation.html#manim.animation.animation.override_animation", "original_name": "animation "}}
{"prompt": "Demonstrate a square animation with a fade-in effect.", "response": "from manim import *\n\nclass MySquare(Square):\n    @override_animation(FadeIn)\n    def _fade_in_override(self, **kwargs):\n        return Create(self, **kwargs)\n\nclass OverrideAnimationExample(Scene):\n    def construct(self):\n        self.play(FadeIn(MySquare()))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.animation.html#manim.animation.animation.prepare_animation", "original_name": "animation "}}
{"prompt": "Demonstrate a visually animated boundary effect on a rotating colored text element.", "response": "from manim import *\n\nclass AnimatedBoundaryExample(Scene):\n    def construct(self):\n        text = Text(\"So shiny!\")\n        boundary = AnimatedBoundary(text, colors=[RED, GREEN, BLUE],\n                                    cycle_rate=3)\n        self.add(text, boundary)\n        self.wait(2)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.changing.AnimatedBoundary.html", "original_name": "AnimatedBoundary "}}
{"prompt": "Demonstrate a red circle tracing its path as it rolls to the right, with a fixed dot following along.", "response": "from manim import *\n\nclass TracedPathExample(Scene):\n    def construct(self):\n        circ = Circle(color=RED).shift(4*LEFT)\n        dot = Dot(color=RED).move_to(circ.get_start())\n        rolling_circle = VGroup(circ, dot)\n        trace = TracedPath(circ.get_start)\n        rolling_circle.add_updater(lambda m: m.rotate(-0.3))\n        self.add(trace, rolling_circle)\n        self.play(rolling_circle.animate.shift(8*RIGHT), run_time=4, rate_func=linear)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.changing.TracedPath.html", "original_name": "TracedPath "}}
{"prompt": "Demonstrate a scene with dots moving in sync, labeled \"25%\", while showing smooth lagged start animation.", "response": "from manim import *\n\nclass LaggedStartExample(Scene):\n    def construct(self):\n        title = Text(\"lag_ratio = 0.25\").to_edge(UP)\n\n        dot1 = Dot(point=LEFT * 2 + UP, radius=0.16)\n        dot2 = Dot(point=LEFT * 2, radius=0.16)\n        dot3 = Dot(point=LEFT * 2 + DOWN, radius=0.16)\n        line_25 = DashedLine(\n            start=LEFT + UP * 2,\n            end=LEFT + DOWN * 2,\n            color=RED\n        )\n        label = Text(\"25%\", font_size=24).next_to(line_25, UP)\n        self.add(title, dot1, dot2, dot3, line_25, label)\n\n        self.play(LaggedStart(\n            dot1.animate.shift(RIGHT * 4),\n            dot2.animate.shift(RIGHT * 4),\n            dot3.animate.shift(RIGHT * 4),\n            lag_ratio=0.25,\n            run_time=4\n        ))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.composition.LaggedStart.html", "original_name": "LaggedStart "}}
{"prompt": "Create a 5x7 grid of dots and title text, then show a lagged yellow ripple effect animation.", "response": "from manim import *\n\nclass LaggedStartMapExample(Scene):\n    def construct(self):\n        title = Tex(\"LaggedStartMap\").to_edge(UP, buff=LARGE_BUFF)\n        dots = VGroup(\n            *[Dot(radius=0.16) for _ in range(35)]\n            ).arrange_in_grid(rows=5, cols=7, buff=MED_LARGE_BUFF)\n        self.add(dots, title)\n\n        # Animate yellow ripple effect\n        for mob in dots, title:\n            self.play(LaggedStartMap(\n                ApplyMethod, mob,\n                lambda m : (m.set_color, YELLOW),\n                lag_ratio = 0.1,\n                rate_func = there_and_back,\n                run_time = 2\n            ))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.composition.LaggedStartMap.html", "original_name": "LaggedStartMap "}}
{"prompt": "Demonstrate the movement of four dots around a square shape in a Manim animation, showcasing their successive transitions.", "response": "from manim import *\n\nclass SuccessionExample(Scene):\n    def construct(self):\n        dot1 = Dot(point=LEFT * 2 + UP * 2, radius=0.16, color=BLUE)\n        dot2 = Dot(point=LEFT * 2 + DOWN * 2, radius=0.16, color=MAROON)\n        dot3 = Dot(point=RIGHT * 2 + DOWN * 2, radius=0.16, color=GREEN)\n        dot4 = Dot(point=RIGHT * 2 + UP * 2, radius=0.16, color=YELLOW)\n        self.add(dot1, dot2, dot3, dot4)\n\n        self.play(Succession(\n            dot1.animate.move_to(dot2),\n            dot2.animate.move_to(dot3),\n            dot3.animate.move_to(dot4),\n            dot4.animate.move_to(dot1)\n        ))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.composition.Succession.html", "original_name": "Succession "}}
{"prompt": "Demonstrate the creation of a square using the Manim animation library.", "response": "from manim import *\n\nclass CreateScene(Scene):\n    def construct(self):\n        self.play(Create(Square()))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.Create.html", "original_name": "Create "}}
{"prompt": "Demonstrate a square drawing itself with a border that then fills in fully.", "response": "from manim import *\n\nclass ShowDrawBorderThenFill(Scene):\n    def construct(self):\n        self.play(DrawBorderThenFill(Square(fill_opacity=1, fill_color=ORANGE)))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.DrawBorderThenFill.html", "original_name": "DrawBorderThenFill "}}
{"prompt": "Demonstrate increasing subsets of geometric shapes (dot, square, triangle) in a seamless animation.", "response": "from manim import *\n\nclass ShowIncreasingSubsetsScene(Scene):\n    def construct(self):\n        p = VGroup(Dot(), Square(), Triangle())\n        self.add(p)\n        self.play(ShowIncreasingSubsets(p))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.ShowIncreasingSubsets.html", "original_name": "ShowIncreasingSubsets "}}
{"prompt": "Demonstrate a spiral animation that moves in towards a group of three shapes.", "response": "from manim import *\n\nclass SpiralInExample(Scene):\n    def construct(self):\n        pi = MathTex(r\"\\pi\").scale(7)\n        pi.shift(2.25 * LEFT + 1.5 * UP)\n        circle = Circle(color=GREEN_C, fill_opacity=1).shift(LEFT)\n        square = Square(color=BLUE_D, fill_opacity=1).shift(UP)\n        shapes = VGroup(pi, circle, square)\n        self.play(SpiralIn(shapes))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.SpiralIn.html", "original_name": "SpiralIn "}}
{"prompt": "Demonstrate inserting text with a cursor that blinks and highlights with purple color.", "response": "from manim import *\n\nclass InsertingTextExample(Scene):\n    def construct(self):\n        text = Text(\"Inserting\", color=PURPLE).scale(1.5).to_edge(LEFT)\n        cursor = Rectangle(\n            color = GREY_A,\n            fill_color = GREY_A,\n            fill_opacity = 1.0,\n            height = 1.1,\n            width = 0.5,\n        ).move_to(text[0]) # Position the cursor\n\n        self.play(TypeWithCursor(text, cursor))\n        self.play(Blink(cursor, blinks=2))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.TypeWithCursor.html", "original_name": "TypeWithCursor "}}
{"prompt": "Create a visual representation of an object (a square) being uncreated, implying its disappearance.", "response": "from manim import *\n\nclass ShowUncreate(Scene):\n    def construct(self):\n        self.play(Uncreate(Square()))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.Uncreate.html", "original_name": "Uncreate "}}
{"prompt": "Create a scene demonstrating text with a moving cursor that blinks and appears to be deleted by changing its opacity.", "response": "from manim import *\n\nclass DeletingTextExample(Scene):\n    def construct(self):\n        text = Text(\"Deleting\", color=PURPLE).scale(1.5).to_edge(LEFT)\n        cursor = Rectangle(\n            color = GREY_A,\n            fill_color = GREY_A,\n            fill_opacity = 1.0,\n            height = 1.1,\n            width = 0.5,\n        ).move_to(text[0]) # Position the cursor\n\n        self.play(UntypeWithCursor(text, cursor))\n        self.play(Blink(cursor, blinks=2))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.UntypeWithCursor.html", "original_name": "UntypeWithCursor "}}
{"prompt": "Demonstrate a reversible unwrapping of a scaled text label.", "response": "from manim import *\n\nclass UnwriteReverseTrue(Scene):\n    def construct(self):\n        text = Tex(\"Alice and Bob\").scale(3)\n        self.add(text)\n        self.play(Unwrite(text))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.Unwrite.html", "original_name": "Unwrite "}}
{"prompt": "Demonstrate a large, bold \"Hello\" text appearing on screen.", "response": "from manim import *\n\nclass ShowWrite(Scene):\n    def construct(self):\n        self.play(Write(Text(\"Hello\", font_size=144)))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.creation.Write.html", "original_name": "Write "}}
{"prompt": "Demonstrate a fade-in and out animation of two texts, shifting and scaling them horizontally over time.", "response": "from manim import *\n\nclass Fading(Scene):\n    def construct(self):\n        tex_in = Tex(\"Fade\", \"In\").scale(3)\n        tex_out = Tex(\"Fade\", \"Out\").scale(3)\n        self.play(FadeIn(tex_in, shift=DOWN, scale=0.66))\n        self.play(ReplacementTransform(tex_in, tex_out))\n        self.play(FadeOut(tex_out, shift=DOWN * 2, scale=1.5))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.fading.html", "original_name": "fading "}}
{"prompt": "Demonstrate a group animation that fades in multiple elements with varying transformations (shift, target position, and scale) on the screen simultaneously.", "response": "from manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeIn with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeIn(tex[0]),\n            FadeIn(tex[1], shift=DOWN),\n            FadeIn(tex[2], target_position=dot),\n            FadeIn(tex[3], scale=1.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.fading.FadeIn.html", "original_name": "FadeIn "}}
{"prompt": "Demonstrate the animation of a dot fading in and out while applying various transformations such as shift, target position, and scale over time.", "response": "from manim import *\n\nclass FadeInExample(Scene):\n    def construct(self):\n        dot = Dot(UP * 2 + LEFT)\n        self.add(dot)\n        tex = Tex(\n            \"FadeOut with \", \"shift \", r\" or target\\_position\", \" and scale\"\n        ).scale(1)\n        animations = [\n            FadeOut(tex[0]),\n            FadeOut(tex[1], shift=DOWN),\n            FadeOut(tex[2], target_position=dot),\n            FadeOut(tex[3], scale=0.5),\n        ]\n        self.play(AnimationGroup(*animations, lag_ratio=0.5))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.fading.FadeOut.html", "original_name": "FadeOut "}}
{"prompt": "Demonstrate the growth of various shapes and objects from different directions in a scene.", "response": "from manim import *\n\nclass Growing(Scene):\n    def construct(self):\n        square = Square()\n        circle = Circle()\n        triangle = Triangle()\n        arrow = Arrow(LEFT, RIGHT)\n        star = Star()\n\n        VGroup(square, circle, triangle).set_x(0).arrange(buff=1.5).set_y(2)\n        VGroup(arrow, star).move_to(DOWN).set_x(0).arrange(buff=1.5).set_y(-2)\n\n        self.play(GrowFromPoint(square, ORIGIN))\n        self.play(GrowFromCenter(circle))\n        self.play(GrowFromEdge(triangle, DOWN))\n        self.play(GrowArrow(arrow))\n        self.play(SpinInFromNothing(star))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.growing.html", "original_name": "growing "}}
{"prompt": "Create a growing animation of two arrows, one stretching from left to right and the other from bottom left to top right, with the second arrow displayed in red.", "response": "from manim import *\n\nclass GrowArrowExample(Scene):\n    def construct(self):\n        arrows = [Arrow(2 * LEFT, 2 * RIGHT), Arrow(2 * DR, 2 * UL)]\n        VGroup(*arrows).set_x(0).arrange(buff=2)\n        self.play(GrowArrow(arrows[0]))\n        self.play(GrowArrow(arrows[1], point_color=RED))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.growing.GrowArrow.html", "original_name": "GrowArrow "}}
{"prompt": "Demonstrate a square growing from the center, with one square changing color upon growth.", "response": "from manim import *\n\nclass GrowFromCenterExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(2)]\n        VGroup(*squares).set_x(0).arrange(buff=2)\n        self.play(GrowFromCenter(squares[0]))\n        self.play(GrowFromCenter(squares[1], point_color=RED))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.growing.GrowFromCenter.html", "original_name": "GrowFromCenter "}}
{"prompt": "Demonstrate a 4-square grid growing from its edges in alternating directions.", "response": "from manim import *\n\nclass GrowFromEdgeExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(4)]\n        VGroup(*squares).set_x(0).arrange(buff=1)\n        self.play(GrowFromEdge(squares[0], DOWN))\n        self.play(GrowFromEdge(squares[1], RIGHT))\n        self.play(GrowFromEdge(squares[2], UR))\n        self.play(GrowFromEdge(squares[3], UP, point_color=RED))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.growing.GrowFromEdge.html", "original_name": "GrowFromEdge "}}
{"prompt": "Demonstrate a geometric figure (four squares) growing from specific points with varying colors.", "response": "from manim import *\n\nclass GrowFromPointExample(Scene):\n    def construct(self):\n        dot = Dot(3 * UR, color=GREEN)\n        squares = [Square() for _ in range(4)]\n        VGroup(*squares).set_x(0).arrange(buff=1)\n        self.add(dot)\n        self.play(GrowFromPoint(squares[0], ORIGIN))\n        self.play(GrowFromPoint(squares[1], [-2, 2, 0]))\n        self.play(GrowFromPoint(squares[2], [3, -2, 0], RED))\n        self.play(GrowFromPoint(squares[3], dot, dot.get_color()))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.growing.GrowFromPoint.html", "original_name": "GrowFromPoint "}}
{"prompt": "Demonstrate the animation of three squares spinning into view with varying color and rotation.", "response": "from manim import *\n\nclass SpinInFromNothingExample(Scene):\n    def construct(self):\n        squares = [Square() for _ in range(3)]\n        VGroup(*squares).set_x(0).arrange(buff=2)\n        self.play(SpinInFromNothing(squares[0]))\n        self.play(SpinInFromNothing(squares[1], angle=2 * PI))\n        self.play(SpinInFromNothing(squares[2], point_color=RED))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.growing.SpinInFromNothing.html", "original_name": "SpinInFromNothing "}}
{"prompt": "Demonstrate a sequence of animations showcasing 7 visual effects, transitioning between each by fading out and fading in subsequent elements with slight vertical shifts.", "response": "from manim import *\n\nclass Indications(Scene):\n    def construct(self):\n        indications = [ApplyWave,Circumscribe,Flash,FocusOn,Indicate,ShowPassingFlash,Wiggle]\n        names = [Tex(i.__name__).scale(3) for i in indications]\n\n        self.add(names[0])\n        for i in range(len(names)):\n            if indications[i] is Flash:\n                self.play(Flash(UP))\n            elif indications[i] is ShowPassingFlash:\n                self.play(ShowPassingFlash(Underline(names[i])))\n            else:\n                self.play(indications[i](names[i]))\n            self.play(AnimationGroup(\n                FadeOut(names[i], shift=UP*1.5),\n                FadeIn(names[(i+1)%len(names)], shift=UP*1.5),\n            ))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.html", "original_name": "indication "}}
{"prompt": "Demonstrate wave motion on a single text element, with varying speed and ripple effects.", "response": "from manim import *\n\nclass ApplyingWaves(Scene):\n    def construct(self):\n        tex = Tex(\"WaveWaveWaveWaveWave\").scale(2)\n        self.play(ApplyWave(tex))\n        self.play(ApplyWave(\n            tex,\n            direction=RIGHT,\n            time_width=0.5,\n            amplitude=0.3\n        ))\n        self.play(ApplyWave(\n            tex,\n            rate_func=linear,\n            ripples=4\n        ))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.ApplyWave.html", "original_name": "ApplyWave "}}
{"prompt": "Create a scene with a large, blinking text label that switches between visibility in 3 successive intervals.", "response": "from manim import *\n\nclass BlinkingExample(Scene):\n    def construct(self):\n        text = Text(\"Blinking\").scale(1.5)\n        self.add(text)\n        self.play(Blink(text, blinks=3))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.Blink.html", "original_name": "Blink "}}
{"prompt": "Create a 2x scaled label with the text \"Circum-scribe\" and demonstrate its transformation into a circle.", "response": "from manim import *\n\nclass UsingCircumscribe(Scene):\n    def construct(self):\n        lbl = Tex(r\"Circum-\\\\scribe\").scale(2)\n        self.add(lbl)\n        self.play(Circumscribe(lbl))\n        self.play(Circumscribe(lbl, Circle))\n        self.play(Circumscribe(lbl, fade_out=True))\n        self.play(Circumscribe(lbl, time_width=2))\n        self.play(Circumscribe(lbl, Circle, True))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.Circumscribe.html", "original_name": "Circumscribe "}}
{"prompt": "Create a flash animation that moves a yellow dot downwards.", "response": "from manim import *\n\nclass UsingFlash(Scene):\n    def construct(self):\n        dot = Dot(color=YELLOW).shift(DOWN)\n        self.add(Tex(\"Flash the dot below:\"), dot)\n        self.play(Flash(dot))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.Flash.html", "original_name": "Flash "}}
{"prompt": "Create a visual focus effect on a yellow dot that moves downward.", "response": "from manim import *\n\nclass UsingFocusOn(Scene):\n    def construct(self):\n        dot = Dot(color=YELLOW).shift(DOWN)\n        self.add(Tex(\"Focusing on the dot below:\"), dot)\n        self.play(FocusOn(dot))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.FocusOn.html", "original_name": "FocusOn "}}
{"prompt": "Demonstrate a highlighted text box using the Indicate animation, scaling it to 3 times its size.", "response": "from manim import *\n\nclass UsingIndicate(Scene):\n    def construct(self):\n        tex = Tex(\"Indicate\").scale(3)\n        self.play(Indicate(tex))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.Indicate.html", "original_name": "Indicate "}}
{"prompt": "Create a visual demonstration of different time widths, transitioning between colored polygons and labeled text.", "response": "from manim import *\n\nclass TimeWidthValues(Scene):\n    def construct(self):\n        p = RegularPolygon(5, color=DARK_GRAY, stroke_width=6).scale(3)\n        lbl = VMobject()\n        self.add(p, lbl)\n        p = p.copy().set_color(BLUE)\n        for time_width in [0.2, 0.5, 1, 2]:\n            lbl.become(Tex(r\"\\texttt{time\\_width={{%.1f}}}\"%time_width))\n            self.play(ShowPassingFlash(\n                p.copy().set_color(BLUE),\n                run_time=2,\n                time_width=time_width\n            ))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.ShowPassingFlash.html", "original_name": "ShowPassingFlash "}}
{"prompt": "Demonstrate a wiggling animation of the text \"Wiggle\" scaled up to 3 units.", "response": "from manim import *\n\nclass ApplyingWaves(Scene):\n    def construct(self):\n        tex = Tex(\"Wiggle\").scale(3)\n        self.play(Wiggle(tex))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.indication.Wiggle.html", "original_name": "Wiggle "}}
{"prompt": "Create a visual demonstration of a 3D square that smoothly translates and oscillates along the Y-axis over time.", "response": "from manim import *\n\nclass HomotopyExample(Scene):\n    def construct(self):\n        square = Square()\n\n        def homotopy(x, y, z, t):\n            if t <= 0.25:\n                progress = t / 0.25\n                return (x, y + progress * 0.2 * np.sin(x), z)\n            else:\n                wave_progress = (t - 0.25) / 0.75\n                return (x, y + 0.2 * np.sin(x + 10 * wave_progress), z)\n\n        self.play(Homotopy(homotopy, square, rate_func= linear, run_time=2))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.movement.Homotopy.html", "original_name": "Homotopy "}}
{"prompt": "Create a Manim animation demonstrating the movement of an orange dot along a line path while maintaining its color.", "response": "from manim import *\n\nclass MoveAlongPathExample(Scene):\n    def construct(self):\n        d1 = Dot().set_color(ORANGE)\n        l1 = Line(LEFT, RIGHT)\n        l2 = VMobject()\n        self.add(d1, l1, l2)\n        l2.add_updater(lambda x: x.become(Line(LEFT, d1.get_center()).set_color(ORANGE)))\n        self.play(MoveAlongPath(d1, l1), rate_func=linear)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.movement.MoveAlongPath.html", "original_name": "MoveAlongPath "}}
{"prompt": "Show a rotating square animation with smooth motion around its center point.", "response": "from manim import *\n\nclass UsingRotate(Scene):\n    def construct(self):\n        self.play(\n            Rotate(\n                Square(side_length=0.5).shift(UP * 2),\n                angle=2*PI,\n                about_point=ORIGIN,\n                rate_func=linear,\n            ),\n            Rotate(Square(side_length=0.5), angle=2*PI, rate_func=linear),\n            )", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.rotation.Rotate.html", "original_name": "Rotate "}}
{"prompt": "Show a teal circle being broadcasted across the screen with smooth animation.", "response": "from manim import *\n\nclass BroadcastExample(Scene):\n    def construct(self):\n        mob = Circle(radius=4, color=TEAL_A)\n        self.play(Broadcast(mob))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.specialized.Broadcast.html", "original_name": "Broadcast "}}
{"prompt": "Demonstrate the animation of two dots moving at different speeds along a horizontal axis, with a smooth transition between them.", "response": "from manim import *\n\nclass SpeedModifierExample(Scene):\n    def construct(self):\n        a = Dot().shift(LEFT * 4)\n        b = Dot().shift(RIGHT * 4)\n        self.add(a, b)\n        self.play(\n            ChangeSpeed(\n                AnimationGroup(\n                    a.animate(run_time=1).shift(RIGHT * 8),\n                    b.animate(run_time=1).shift(LEFT * 8),\n                ),\n                speedinfo={0.3: 1, 0.4: 0.1, 0.6: 0.1, 1: 1},\n                rate_func=linear,\n            )\n        )", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.speedmodifier.ChangeSpeed.html", "original_name": "ChangeSpeed "}}
{"prompt": "Demonstrate the application of a 2x2 transformation matrix to display text and a coordinate plane with scaling.", "response": "from manim import *\n\nclass ApplyMatrixExample(Scene):\n    def construct(self):\n        matrix = [[1, 1], [0, 2/3]]\n        self.play(ApplyMatrix(matrix, Text(\"Hello World!\")), ApplyMatrix(matrix, NumberPlane()))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.ApplyMatrix.html", "original_name": "ApplyMatrix "}}
{"prompt": "Demonstrate a 2D square warping into a 3D cube by transforming its points along the z-axis.", "response": "from manim import *\n\nclass WarpSquare(Scene):\n    def construct(self):\n        square = Square()\n        self.play(\n            ApplyPointwiseFunction(\n                lambda point: complex_to_R3(np.exp(R3_to_complex(point))), square\n            )\n        )\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.ApplyPointwiseFunction.html", "original_name": "ApplyPointwiseFunction "}}
{"prompt": "Create a transformation sequence showing two squares rotating clockwise around the dots.", "response": "from manim import *\n\nclass ClockwiseExample(Scene):\n    def construct(self):\n        dl, dr = Dot(), Dot()\n        sl, sr = Square(), Square()\n\n        VGroup(dl, sl).arrange(DOWN).shift(2*LEFT)\n        VGroup(dr, sr).arrange(DOWN).shift(2*RIGHT)\n\n        self.add(dl, dr)\n        self.wait()\n        self.play(\n            ClockwiseTransform(dl, sl),\n            Transform(dr, sr)\n        )\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.ClockwiseTransform.html", "original_name": "ClockwiseTransform "}}
{"prompt": "Demonstrate the transformation of two numbers with a counterclockwise and clockwise motion, scaling their texts.", "response": "from manim import *\n\nclass CounterclockwiseTransform_vs_Transform(Scene):\n    def construct(self):\n        # set up the numbers\n        c_transform = VGroup(DecimalNumber(number=3.141, num_decimal_places=3), DecimalNumber(number=1.618, num_decimal_places=3))\n        text_1 = Text(\"CounterclockwiseTransform\", color=RED)\n        c_transform.add(text_1)\n\n        transform = VGroup(DecimalNumber(number=1.618, num_decimal_places=3), DecimalNumber(number=3.141, num_decimal_places=3))\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(c_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        c_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs move in clockwise direction for ClockwiseTransform()\n        self.play(CounterclockwiseTransform(c_transform[0], c_transform[1]))\n\n        # The mobs move straight up for Transform()\n        self.play(Transform(transform[0], transform[1]))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.CounterclockwiseTransform.html", "original_name": "CounterclockwiseTransform "}}
{"prompt": "Create a rotating, cyclic animation of shapes (square, circle, triangle, star) by replacing each shape with the next one.", "response": "from manim import *\n\nclass CyclicReplaceExample(Scene):\n    def construct(self):\n        group = VGroup(Square(), Circle(), Triangle(), Star())\n        group.arrange(RIGHT)\n        self.add(group)\n\n        for _ in range(4):\n            self.play(CyclicReplace(*group))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.CyclicReplace.html", "original_name": "CyclicReplace "}}
{"prompt": "Demonstrate a simple animation where text fades to red.", "response": "from manim import *\n\nclass FadeToColorExample(Scene):\n    def construct(self):\n        self.play(FadeToColor(Text(\"Hello World!\"), color=RED))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.FadeToColor.html", "original_name": "FadeToColor "}}
{"prompt": "Demonstrate a series of transformations involving fading and scaling of rectangles to circles with varying opacity and scale.", "response": "from manim import *\n\nclass DifferentFadeTransforms(Scene):\n    def construct(self):\n        starts = [Rectangle(width=4, height=1) for _ in range(3)]\n        VGroup(*starts).arrange(DOWN, buff=1).shift(3*LEFT)\n        targets = [Circle(fill_opacity=1).scale(0.25) for _ in range(3)]\n        VGroup(*targets).arrange(DOWN, buff=1).shift(3*RIGHT)\n\n        self.play(*[FadeIn(s) for s in starts])\n        self.play(\n            FadeTransform(starts[0], targets[0], stretch=True),\n            FadeTransform(starts[1], targets[1], stretch=False, dim_to_match=0),\n            FadeTransform(starts[2], targets[2], stretch=False, dim_to_match=1)\n        )\n\n        self.play(*[FadeOut(mobj) for mobj in self.mobjects])", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.FadeTransform.html", "original_name": "FadeTransform "}}
{"prompt": "Demonstrate the transformation of two groups of shapes with fading and sliding motions.", "response": "from manim import *\n\nclass FadeTransformSubmobjects(Scene):\n    def construct(self):\n        src = VGroup(Square(), Circle().shift(LEFT + UP))\n        src.shift(3*LEFT + 2*UP)\n        src_copy = src.copy().shift(4*DOWN)\n\n        target = VGroup(Circle(), Triangle().shift(RIGHT + DOWN))\n        target.shift(3*RIGHT + 2*UP)\n        target_copy = target.copy().shift(4*DOWN)\n\n        self.play(FadeIn(src), FadeIn(src_copy))\n        self.play(\n            FadeTransform(src, target),\n            FadeTransformPieces(src_copy, target_copy)\n        )\n        self.play(*[FadeOut(mobj) for mobj in self.mobjects])", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.FadeTransformPieces.html", "original_name": "FadeTransformPieces "}}
{"prompt": "Create a green circle that smoothly moves to its target position, scaling down and shifting slightly along the way.", "response": "from manim import *\n\nclass MoveToTargetExample(Scene):\n    def construct(self):\n        c = Circle()\n\n        c.generate_target()\n        c.target.set_fill(color=GREEN, opacity=0.5)\n        c.target.shift(2*RIGHT + UP).scale(0.5)\n\n        self.add(c)\n        self.play(MoveToTarget(c))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.MoveToTarget.html", "original_name": "MoveToTarget "}}
{"prompt": "Create a Manim animation that shows two groups of integers (one labeled \"ReplacementTransform\" and one labeled \"Transform\") replacing each other, with the second group lingering after the transformation.", "response": "from manim import *\n\nclass ReplacementTransformOrTransform(Scene):\n    def construct(self):\n        # set up the numbers\n        r_transform = VGroup(*[Integer(i) for i in range(1,4)])\n        text_1 = Text(\"ReplacementTransform\", color=RED)\n        r_transform.add(text_1)\n\n        transform = VGroup(*[Integer(i) for i in range(4,7)])\n        text_2 = Text(\"Transform\", color=BLUE)\n        transform.add(text_2)\n\n        ints = VGroup(r_transform, transform)\n        texts = VGroup(text_1, text_2).scale(0.75)\n        r_transform.arrange(direction=UP, buff=1)\n        transform.arrange(direction=UP, buff=1)\n\n        ints.arrange(buff=2)\n        self.add(ints, texts)\n\n        # The mobs replace each other and none are left behind\n        self.play(ReplacementTransform(r_transform[0], r_transform[1]))\n        self.play(ReplacementTransform(r_transform[1], r_transform[2]))\n\n        # The mobs linger after the Transform()\n        self.play(Transform(transform[0], transform[1]))\n        self.play(Transform(transform[1], transform[2]))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.ReplacementTransform.html", "original_name": "ReplacementTransform "}}
{"prompt": "Demonstrate a square transforming into its original state over time, with a fade-in and fade-out effect.", "response": "from manim import *\n\nclass RestoreExample(Scene):\n    def construct(self):\n        s = Square()\n        s.save_state()\n        self.play(FadeIn(s))\n        self.play(s.animate.set_color(PURPLE).set_opacity(0.5).shift(2*LEFT).scale(3))\n        self.play(s.animate.shift(5*DOWN).rotate(PI/4))\n        self.wait()\n        self.play(Restore(s), run_time=2)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.Restore.html", "original_name": "Restore "}}
{"prompt": "Show a \"Hello World!\" text scaling in place from its original size to twice its original size.", "response": "from manim import *\n\nclass ScaleInPlaceExample(Scene):\n    def construct(self):\n        self.play(ScaleInPlace(Text(\"Hello World!\"), 2))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.ScaleInPlace.html", "original_name": "ScaleInPlace "}}
{"prompt": "Demonstrate text shrinking to the center of the screen.", "response": "from manim import *\n\nclass ShrinkToCenterExample(Scene):\n    def construct(self):\n        self.play(ShrinkToCenter(Text(\"Hello World!\")))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.ShrinkToCenter.html", "original_name": "ShrinkToCenter "}}
{"prompt": "Demonstrate colorful circles rotating around each other with smoothly animated arcs.", "response": "from manim import *\n\nclass TransformPathArc(Scene):\n    def construct(self):\n        def make_arc_path(start, end, arc_angle):\n            points = []\n            p_fn = path_along_arc(arc_angle)\n            # alpha animates between 0.0 and 1.0, where 0.0\n            # is the beginning of the animation and 1.0 is the end.\n            for alpha in range(0, 11):\n                points.append(p_fn(start, end, alpha / 10.0))\n            path = VMobject(stroke_color=YELLOW)\n            path.set_points_smoothly(points)\n            return path\n\n        left = Circle(stroke_color=BLUE_E, fill_opacity=1.0, radius=0.5).move_to(LEFT * 2)\n        colors = [TEAL_A, TEAL_B, TEAL_C, TEAL_D, TEAL_E, GREEN_A]\n        # Positive angles move counter-clockwise, negative angles move clockwise.\n        examples = [-90, 0, 30, 90, 180, 270]\n        anims = []\n        for idx, angle in enumerate(examples):\n            left_c = left.copy().shift((3 - idx) * UP)\n            left_c.fill_color = colors[idx]\n            right_c = left_c.copy().shift(4 * RIGHT)\n            path_arc = make_arc_path(left_c.get_center(), right_c.get_center(),\n                                     arc_angle=angle * DEGREES)\n            desc = Text('%d\u00b0' % examples[idx]).next_to(left_c, LEFT)\n            # Make the circles in front of the text in front of the arcs.\n            self.add(\n                path_arc.set_z_index(1),\n                desc.set_z_index(2),\n                left_c.set_z_index(3),\n            )\n            anims.append(Transform(left_c, right_c, path_arc=angle * DEGREES))\n\n        self.play(*anims, run_time=2)\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform.Transform.html", "original_name": "Transform "}}
{"prompt": "Demonstrate an anagram transformation between two Morse code sequences using a text-to-text animation with a circular overlap.", "response": "from manim import *\n\nclass Anagram(Scene):\n    def construct(self):\n        src = Text(\"the morse code\")\n        tar = Text(\"here come dots\")\n        self.play(Write(src))\n        self.wait(0.5)\n        self.play(TransformMatchingShapes(src, tar, path_arc=PI/2))\n        self.wait(0.5)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform_matching_parts.TransformMatchingShapes.html", "original_name": "TransformMatchingShapes "}}
{"prompt": "Demonstrate transformation of equations by superimposing variables, showcasing match and substitution changes with animations.", "response": "from manim import *\n\nclass MatchingEquationParts(Scene):\n    def construct(self):\n        variables = VGroup(MathTex(\"a\"), MathTex(\"b\"), MathTex(\"c\")).arrange_submobjects().shift(UP)\n\n        eq1 = MathTex(\"{{x}}^2\", \"+\", \"{{y}}^2\", \"=\", \"{{z}}^2\")\n        eq2 = MathTex(\"{{a}}^2\", \"+\", \"{{b}}^2\", \"=\", \"{{c}}^2\")\n        eq3 = MathTex(\"{{a}}^2\", \"=\", \"{{c}}^2\", \"-\", \"{{b}}^2\")\n\n        self.add(eq1)\n        self.wait(0.5)\n        self.play(TransformMatchingTex(Group(eq1, variables), eq2))\n        self.wait(0.5)\n        self.play(TransformMatchingTex(eq2, eq3))\n        self.wait(0.5)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.animation.transform_matching_parts.TransformMatchingTex.html", "original_name": "TransformMatchingTex "}}
{"prompt": "Demonstrate a dynamic graph with moving vertices and edges.", "response": "from manim import *\n\nclass MovingDiGraph(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n\n        g = DiGraph(vertices, edges)\n\n        self.add(g)\n        self.play(\n            g[1].animate.move_to([1, 1, 1]),\n            g[2].animate.move_to([-1, 1, 2]),\n            g[3].animate.move_to([1, -1, -1]),\n            g[4].animate.move_to([-1, -1, 0]),\n        )\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.graph.DiGraph.html", "original_name": "DiGraph "}}
{"prompt": "Demonstrate a graph with initial layout and transform its structure to a circular layout.", "response": "from manim import *\n\nclass ChangeGraphLayout(Scene):\n    def construct(self):\n        G = Graph([1, 2, 3, 4, 5], [(1, 2), (2, 3), (3, 4), (4, 5)],\n                  layout={1: [-2, 0, 0], 2: [-1, 0, 0], 3: [0, 0, 0],\n                          4: [1, 0, 0], 5: [2, 0, 0]}\n                  )\n        self.play(Create(G))\n        self.play(G.animate.change_layout(\"circular\"))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.graph.GenericGraph.html", "original_name": "GenericGraph "}}
{"prompt": "Show a square grid of moving vertices on an axis.", "response": "from manim import *\n\nclass MovingVertices(Scene):\n    def construct(self):\n        vertices = [1, 2, 3, 4]\n        edges = [(1, 2), (2, 3), (3, 4), (1, 3), (1, 4)]\n        g = Graph(vertices, edges)\n        self.play(Create(g))\n        self.wait()\n        self.play(g[1].animate.move_to([1, 1, 0]),\n                  g[2].animate.move_to([-1, 1, 0]),\n                  g[3].animate.move_to([1, -1, 0]),\n                  g[4].animate.move_to([-1, -1, 0]))\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.graph.Graph.html", "original_name": "Graph "}}
{"prompt": "Show a graph with custom layout, displaying nodes in a staggered pattern across the screen.", "response": "from manim import *\n\nclass CustomLayoutExample(Scene):\n    def construct(self):\n        import numpy as np\n        import networkx as nx\n\n        # create custom layout\n        def custom_layout(\n            graph: nx.Graph,\n            scale: float | tuple[float, float, float] = 2,\n            n: int | None = None,\n            *args: Any,\n            **kwargs: Any,\n        ):\n            nodes = sorted(list(graph))\n            height = len(nodes) // n\n            return {\n                node: (scale * np.array([\n                    (i % n) - (n-1)/2,\n                    -(i // n) + height/2,\n                    0\n                ])) for i, node in enumerate(graph)\n            }\n\n        # draw graph\n        n = 4\n        graph = Graph(\n            [i for i in range(4 * 2 - 1)],\n            [(0, 1), (0, 4), (1, 2), (1, 5), (2, 3), (2, 6), (4, 5), (5, 6)],\n            labels=True,\n            layout=custom_layout,\n            layout_config={'n': n}\n        )\n        self.add(graph)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.graph.LayoutFunction.html", "original_name": "LayoutFunction "}}
{"prompt": "Create a visually striking dark-themed banner that expands and then disappears.", "response": "from manim import *\n\nclass DarkThemeBanner(Scene):\n    def construct(self):\n        banner = ManimBanner()\n        self.play(banner.create())\n        self.play(banner.expand())\n        self.wait()\n        self.play(Unwrite(banner))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.logo.ManimBanner.html", "original_name": "ManimBanner "}}
{"prompt": "Demonstrate a grid arrangement of matrices and Mobjects with various visual elements, including circles, squares, math symbols, and stars.", "response": "from manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 0], [-1, 1]])\n        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m2 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12.33]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m3 = MobjectMatrix(\n            [[Circle().scale(0.3), Square().scale(0.3)],\n            [MathTex(\"\\\\pi\").scale(2), Star().scale(0.3)]],\n            left_bracket=\"\\\\langle\",\n            right_bracket=\"\\\\rangle\")\n        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)\n        self.add(g)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.html", "original_name": "matrix "}}
{"prompt": "Demonstrate a DecimalMatrix with rounded numbers using curly brackets and precise formatting.", "response": "from manim import *\n\nclass DecimalMatrixExample(Scene):\n    def construct(self):\n        m0 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=\"\\\\{\",\n            right_bracket=\"\\\\}\")\n        self.add(m0)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.DecimalMatrix.html", "original_name": "DecimalMatrix "}}
{"prompt": "Create a visual representation of an integer matrix with rounded numbers and boxed border.\n\nOr:\n\nShow an example of an integer matrix with precise decimal values in a bordered display.", "response": "from manim import *\n\nclass IntegerMatrixExample(Scene):\n    def construct(self):\n        m0 = IntegerMatrix(\n            [[3.7, 2], [42.2, 12]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        self.add(m0)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.IntegerMatrix.html", "original_name": "IntegerMatrix "}}
{"prompt": "Create a grid of six matrices with various transformations and colorings, showcasing different alignments and brackets.", "response": "from manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[2, r\"\\pi\"], [-1, 1]])\n        m1 = Matrix([[2, 0, 4], [-1, 1, 5]],\n            v_buff=1.3,\n            h_buff=0.8,\n            bracket_h_buff=SMALL_BUFF,\n            bracket_v_buff=SMALL_BUFF,\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m1.add(SurroundingRectangle(m1.get_columns()[1]))\n        m2 = Matrix([[2, 1], [-1, 3]],\n            element_alignment_corner=UL,\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m3 = Matrix([[2, 1], [-1, 3]],\n            left_bracket=r\"\\langle\",\n            right_bracket=r\"\\rangle\")\n        m4 = Matrix([[2, 1], [-1, 3]],\n        ).set_column_colors(RED, GREEN)\n        m5 = Matrix([[2, 1], [-1, 3]],\n        ).set_row_colors(RED, GREEN)\n        g = Group(\n            m0,m1,m2,m3,m4,m5\n        ).arrange_in_grid(buff=2)\n        self.add(g)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.Matrix.html", "original_name": "Matrix "}}
{"prompt": "Demonstrate a 2x2 matrix layout with Circle, Square, and MathTex elements, using Manim's MobjectMatrix.", "response": "from manim import *\n\nclass MobjectMatrixExample(Scene):\n    def construct(self):\n        a = Circle().scale(0.3)\n        b = Square().scale(0.3)\n        c = MathTex(\"\\\\pi\").scale(2)\n        d = Star().scale(0.3)\n        m0 = MobjectMatrix([[a, b], [c, d]])\n        self.add(m0)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.MobjectMatrix.html", "original_name": "MobjectMatrix "}}
{"prompt": "Demonstrate creation of matrices with various visual elements, including integers, decimals, and custom shapes.", "response": "from manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 0], [-1, 1]])\n        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m2 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12.33]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m3 = MobjectMatrix(\n            [[Circle().scale(0.3), Square().scale(0.3)],\n            [MathTex(\"\\\\pi\").scale(2), Star().scale(0.3)]],\n            left_bracket=\"\\\\langle\",\n            right_bracket=\"\\\\rangle\")\n        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)\n        self.add(g)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.html#manim.mobject.matrix.get_det_text", "original_name": "matrix "}}
{"prompt": "Demonstrate a group of matrices and 3D objects in a grid layout.", "response": "from manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 0], [-1, 1]])\n        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m2 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12.33]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m3 = MobjectMatrix(\n            [[Circle().scale(0.3), Square().scale(0.3)],\n            [MathTex(\"\\\\pi\").scale(2), Star().scale(0.3)]],\n            left_bracket=\"\\\\langle\",\n            right_bracket=\"\\\\rangle\")\n        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)\n        self.add(g)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.html#manim.mobject.matrix.matrix_to_mobject", "original_name": "matrix "}}
{"prompt": "Create a visual representation of mathematical matrices with various formatting options and display in a grid layout.", "response": "from manim import *\n\nclass MatrixExamples(Scene):\n    def construct(self):\n        m0 = Matrix([[\"\\\\pi\", 0], [-1, 1]])\n        m1 = IntegerMatrix([[1.5, 0.], [12, -1.3]],\n            left_bracket=\"(\",\n            right_bracket=\")\")\n        m2 = DecimalMatrix(\n            [[3.456, 2.122], [33.2244, 12.33]],\n            element_to_mobject_config={\"num_decimal_places\": 2},\n            left_bracket=r\"\\{\",\n            right_bracket=r\"\\}\")\n        m3 = MobjectMatrix(\n            [[Circle().scale(0.3), Square().scale(0.3)],\n            [MathTex(\"\\\\pi\").scale(2), Star().scale(0.3)]],\n            left_bracket=\"\\\\langle\",\n            right_bracket=\"\\\\rangle\")\n        g = Group(m0, m1, m2, m3).arrange_in_grid(buff=2)\n        self.add(g)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.matrix.html#manim.mobject.matrix.matrix_to_tex_string", "original_name": "matrix "}}
{"prompt": "Create a circle with text content and demonstrate its clear animation, revealing a blank space.", "response": "from manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.mobject.html", "original_name": "mobject "}}
{"prompt": "Create a circle with animated text content, demonstrating circle creation and content removal.", "response": "from manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.mobject.html#manim.mobject.mobject.TimeBasedUpdater", "original_name": "mobject "}}
{"prompt": "Create a visual example demonstrating the creation and removal of animated circle with content, showcasing circle transformations and text overlay.", "response": "from manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.mobject.html#manim.mobject.mobject.NonTimeBasedUpdater", "original_name": "mobject "}}
{"prompt": "\"Show a circle with text content that fades away over time.\"", "response": "from manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.mobject.html#manim.mobject.mobject.Updater", "original_name": "mobject "}}
{"prompt": "Create an animated dot that rotates around its center point.", "response": "from manim import *\n\nclass NextToUpdater(Scene):\n    def construct(self):\n        def dot_position(mobject):\n            mobject.set_value(dot.get_center()[0])\n            mobject.next_to(dot)\n\n        dot = Dot(RIGHT*3)\n        label = DecimalNumber()\n        label.add_updater(dot_position)\n        self.add(dot, label)\n\n        self.play(Rotating(dot, about_point=ORIGIN, angle=TAU, run_time=TAU, rate_func=linear))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html", "original_name": "Mobject "}}
{"prompt": "\"Create and animate a circle with content, demonstrating clear animation and transformation over time.\"", "response": "from manim import *\n\nclass CircleWithContent(VGroup):\n    def __init__(self, content):\n        super().__init__()\n        self.circle = Circle()\n        self.content = content\n        self.add(self.circle, content)\n        content.move_to(self.circle.get_center())\n\n    def clear_content(self):\n        self.remove(self.content)\n        self.content = None\n\n    @override_animate(clear_content)\n    def _clear_content_animation(self, anim_args=None):\n        if anim_args is None:\n            anim_args = {}\n        anim = Uncreate(self.content, **anim_args)\n        self.clear_content()\n        return anim\n\nclass AnimationOverrideExample(Scene):\n    def construct(self):\n        t = Text(\"hello!\")\n        my_mobject = CircleWithContent(t)\n        self.play(Create(my_mobject))\n        self.play(my_mobject.animate.clear_content())\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.mobject.html#manim.mobject.mobject.override_animate", "original_name": "mobject "}}
{"prompt": "Demonstrate a visual comparison of two tables with different data types and layouts, featuring highlighted cells, color-coded lines, and interactive crosshairs.", "response": "from manim import *\n\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"First\", \"Second\"],\n            [\"Third\",\"Fourth\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Text(\"TOP\"))\n        t0.add_highlighted_cell((2,2), color=GREEN)\n        x_vals = np.linspace(-2,2,5)\n        y_vals = np.exp(x_vals)\n        t1 = DecimalTable(\n            [x_vals, y_vals],\n            row_labels=[MathTex(\"x\"), MathTex(\"f(x)\")],\n            include_outer_lines=True)\n        t1.add(t1.get_cell((2,2), color=RED))\n        t2 = MathTable(\n            [[\"+\", 0, 5, 10],\n            [0, 0, 5, 10],\n            [2, 2, 7, 12],\n            [4, 4, 9, 14]],\n            include_outer_lines=True)\n        t2.get_horizontal_lines()[:3].set_color(BLUE)\n        t2.get_vertical_lines()[:3].set_color(BLUE)\n        t2.get_horizontal_lines()[:3].set_z_index(1)\n        cross = VGroup(\n            Line(UP + LEFT, DOWN + RIGHT),\n            Line(UP + RIGHT, DOWN + LEFT))\n        a = Circle().set_color(RED).scale(0.5)\n        b = cross.set_color(BLUE).scale(0.5)\n        t3 = MobjectTable(\n            [[a.copy(),b.copy(),a.copy()],\n            [b.copy(),a.copy(),a.copy()],\n            [a.copy(),b.copy(),b.copy()]])\n        t3.add(Line(\n            t3.get_corner(DL), t3.get_corner(UR)\n        ).set_color(RED))\n        vals = np.arange(1,21).reshape(5,4)\n        t4 = IntegerTable(\n            vals,\n            include_outer_lines=True\n        )\n        g1 = Group(t0, t1).scale(0.5).arrange(buff=1).to_edge(UP, buff=1)\n        g2 = Group(t2, t3, t4).scale(0.5).arrange(buff=1).to_edge(DOWN, buff=1)\n        self.add(g1, g2)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.table.html", "original_name": "table "}}
{"prompt": "Create a decimal table displaying the exponential function f(x) = e^x, with rounded values.", "response": "from manim import *\n\nclass DecimalTableExample(Scene):\n    def construct(self):\n        x_vals = [-2,-1,0,1,2]\n        y_vals = np.exp(x_vals)\n        t0 = DecimalTable(\n            [x_vals, y_vals],\n            row_labels=[MathTex(\"x\"), MathTex(\"f(x)=e^{x}\")],\n            h_buff=1,\n            element_to_mobject_config={\"num_decimal_places\": 2})\n        self.add(t0)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.table.DecimalTable.html", "original_name": "DecimalTable "}}
{"prompt": "Demonstrate a rotating table showing angles and trigonometric values from 0 to \u03c0/2 radians.", "response": "from manim import *\n\nclass IntegerTableExample(Scene):\n    def construct(self):\n        t0 = IntegerTable(\n            [[0,30,45,60,90],\n            [90,60,45,30,0]],\n            col_labels=[\n                MathTex(r\"\\frac{\\sqrt{0}}{2}\"),\n                MathTex(r\"\\frac{\\sqrt{1}}{2}\"),\n                MathTex(r\"\\frac{\\sqrt{2}}{2}\"),\n                MathTex(r\"\\frac{\\sqrt{3}}{2}\"),\n                MathTex(r\"\\frac{\\sqrt{4}}{2}\")],\n            row_labels=[MathTex(r\"\\sin\"), MathTex(r\"\\cos\")],\n            h_buff=1,\n            element_to_mobject_config={\"unit\": r\"^{\\circ}\"})\n        self.add(t0)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.table.IntegerTable.html", "original_name": "IntegerTable "}}
{"prompt": "Demonstrate a static math table with various visual elements, including rows and columns of numbers.", "response": "from manim import *\n\nclass MathTableExample(Scene):\n    def construct(self):\n        t0 = MathTable(\n            [[\"+\", 0, 5, 10],\n            [0, 0, 5, 10],\n            [2, 2, 7, 12],\n            [4, 4, 9, 14]],\n            include_outer_lines=True)\n        self.add(t0)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.table.MathTable.html", "original_name": "MathTable "}}
{"prompt": "Create a rotating table with colored circles that demonstrate transformation and alignment of MobjectTable.", "response": "from manim import *\n\nclass MobjectTableExample(Scene):\n    def construct(self):\n        cross = VGroup(\n            Line(UP + LEFT, DOWN + RIGHT),\n            Line(UP + RIGHT, DOWN + LEFT),\n        )\n        a = Circle().set_color(RED).scale(0.5)\n        b = cross.set_color(BLUE).scale(0.5)\n        t0 = MobjectTable(\n            [[a.copy(),b.copy(),a.copy()],\n            [b.copy(),a.copy(),a.copy()],\n            [a.copy(),b.copy(),b.copy()]]\n        )\n        line = Line(\n            t0.get_corner(DL), t0.get_corner(UR)\n        ).set_color(RED)\n        self.add(t0, line)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.table.MobjectTable.html", "original_name": "MobjectTable "}}
{"prompt": "Demonstrate the creation of multiple tables with various visual elements, including row and column labels, highlighted cells, and custom line styles.", "response": "from manim import *\n\nclass TableExamples(Scene):\n    def construct(self):\n        t0 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table in \\\\n Manim.\"]])\n        t1 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")])\n        t1.add_highlighted_cell((2,2), color=YELLOW)\n        t2 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            arrange_in_grid_config={\"cell_alignment\": RIGHT})\n        t2.add(t2.get_cell((2,2), color=RED))\n        t3 = Table(\n            [[\"This\", \"is a\"],\n            [\"simple\", \"Table.\"]],\n            row_labels=[Text(\"R1\"), Text(\"R2\")],\n            col_labels=[Text(\"C1\"), Text(\"C2\")],\n            top_left_entry=Star().scale(0.3),\n            include_outer_lines=True,\n            line_config={\"stroke_width\": 1, \"color\": YELLOW})\n        t3.remove(*t3.get_vertical_lines())\n        g = Group(\n            t0,t1,t2,t3\n        ).scale(0.7).arrange_in_grid(buff=1)\n        self.add(g)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.table.Table.html", "original_name": "Table "}}
{"prompt": "Demonstrate movement of a dot on the complex plane in response to value updates.", "response": "from manim import *\n\nclass ComplexValueTrackerExample(Scene):\n    def construct(self):\n        tracker = ComplexValueTracker(-2+1j)\n        dot = Dot().add_updater(\n            lambda x: x.move_to(tracker.points)\n        )\n\n        self.add(NumberPlane(), dot)\n\n        self.play(tracker.animate.set_value(3+2j))\n        self.play(tracker.animate.set_value(tracker.get_value() * 1j))\n        self.play(tracker.animate.set_value(tracker.get_value() - 2j))\n        self.play(tracker.animate.set_value(tracker.get_value() / (-2 + 3j)))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.value_tracker.ComplexValueTracker.html", "original_name": "ComplexValueTracker "}}
{"prompt": "Show a dynamic number line with an animated pointer, tracking changes to its position, and updating the label accordingly.", "response": "from manim import *\n\nclass ValueTrackerExample(Scene):\n    def construct(self):\n        number_line = NumberLine()\n        pointer = Vector(DOWN)\n        label = MathTex(\"x\").add_updater(lambda m: m.next_to(pointer, UP))\n\n        tracker = ValueTracker(0)\n        pointer.add_updater(\n            lambda m: m.next_to(\n                        number_line.n2p(tracker.get_value()),\n                        UP\n                    )\n        )\n        self.add(number_line, pointer,label)\n        tracker += 1.5\n        self.wait(1)\n        tracker -= 4\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(5))\n        self.wait(0.5)\n        self.play(tracker.animate.set_value(3))\n        self.play(tracker.animate.increment_value(-2))\n        self.wait(0.5)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.value_tracker.ValueTracker.html", "original_name": "ValueTracker "}}
{"prompt": "Demonstrate a mathematical function as an arrow field, mapping 2D space to a 2D vector.", "response": "from manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(ArrowVectorField(func))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.vector_field.ArrowVectorField.html", "original_name": "ArrowVectorField "}}
{"prompt": "Demonstrate a flowing stream of lines that smoothly move and curve in a diagonal path.", "response": "from manim import *\n\nclass BasicUsage(Scene):\n    def construct(self):\n        func = lambda pos: ((pos[0] * UR + pos[1] * LEFT) - pos) / 3\n        self.add(StreamLines(func))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.vector_field.StreamLines.html", "original_name": "StreamLines "}}
{"prompt": "Demonstrate a 3D vector field with arrows nudging a gray circle and a white dot in sync.", "response": "from manim import *\n\nclass Nudging(Scene):\n    def construct(self):\n        func = lambda pos: np.sin(pos[1] / 2) * RIGHT + np.cos(pos[0] / 2) * UP\n        vector_field = ArrowVectorField(\n            func, x_range=[-7, 7, 1], y_range=[-4, 4, 1], length_func=lambda x: x / 2\n        )\n        self.add(vector_field)\n        circle = Circle(radius=2).shift(LEFT)\n        self.add(circle.copy().set_color(GRAY))\n        dot = Dot().move_to(circle)\n\n        vector_field.nudge(circle, -2, 60, True)\n        vector_field.nudge(dot, -2, 60)\n\n        circle.add_updater(vector_field.get_nudge_updater(pointwise=True))\n        dot.add_updater(vector_field.get_nudge_updater())\n        self.add(circle, dot)\n        self.wait(6)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.mobject.vector_field.VectorField.html", "original_name": "VectorField "}}
{"prompt": "Create a camera animation that scales its width while restoring the original frame size.", "response": "from manim import *\n\nclass ChangingCameraWidthAndRestore(MovingCameraScene):\n    def construct(self):\n        text = Text(\"Hello World\").set_color(BLUE)\n        self.add(text)\n        self.camera.frame.save_state()\n        self.play(self.camera.frame.animate.set(width=text.width * 1.2))\n        self.wait(0.3)\n        self.play(Restore(self.camera.frame))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.scene.moving_camera_scene.html", "original_name": "moving_camera_scene "}}
{"prompt": "Show a \"Hello World!\" text appearing on the screen.", "response": "class MyScene(Scene):\n    def construct(self):\n        self.play(Write(Text(\"Hello World!\")))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.scene.scene.Scene.html", "original_name": "Scene "}}
{"prompt": "Demonstrate a linear transformation on a 2D grid, rotating and scaling a vector by the given matrix.", "response": "from manim import *\n\nclass LinearTransformationSceneExample(LinearTransformationScene):\n    def __init__(self, **kwargs):\n        LinearTransformationScene.__init__(\n            self,\n            show_coordinates=True,\n            leave_ghost_vectors=True,\n            **kwargs\n        )\n\n    def construct(self):\n        matrix = [[1, 1], [0, 1]]\n        self.apply_matrix(matrix)\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.scene.vector_space_scene.LinearTransformationScene.html", "original_name": "LinearTransformationScene "}}
{"prompt": "Create a zoomed scene that starts with a green dot, then suddenly moves to the left.", "response": "from manim import *\n\nclass UseZoomedScene(ZoomedScene):\n    def construct(self):\n        dot = Dot().set_color(GREEN)\n        self.add(dot)\n        self.wait(1)\n        self.activate_zooming(animate=False)\n        self.wait(1)\n        self.play(dot.animate.shift(LEFT))", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.scene.zoomed_scene.html", "original_name": "zoomed_scene "}}
{"prompt": "Demonstrate mathematical formula with color-coded indices and highlighted terms using animated MathTex and index labels.", "response": "from manim import *\n\nclass IndexLabelsExample(Scene):\n    def construct(self):\n        text = MathTex(\n            \"\\\\frac{d}{dx}f(x)g(x)=\",\n            \"f(x)\\\\frac{d}{dx}g(x)\",\n            \"+\",\n            \"g(x)\\\\frac{d}{dx}f(x)\",\n        )\n\n        #index the fist term in the MathTex mob\n        indices = index_labels(text[0])\n\n        text[0][1].set_color(PURPLE_B)\n        text[0][8:12].set_color(DARK_BLUE)\n\n        self.add(text, indices)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.utils.debug.html", "original_name": "debug "}}
{"prompt": "Demonstrate a clockwise transformation of four colored dots along their circular paths.", "response": "from manim import *\n\nclass ClockwisePathExample(Scene):\n    def construct(self):\n        colors = [RED, GREEN, BLUE]\n\n        starting_points = VGroup(\n            *[\n                Dot(LEFT + pos, color=color)\n                for pos, color in zip([UP, DOWN, LEFT], colors)\n            ]\n        )\n\n        finish_points = VGroup(\n            *[\n                Dot(RIGHT + pos, color=color)\n                for pos, color in zip([ORIGIN, UP, DOWN], colors)\n            ]\n        )\n\n        self.add(starting_points)\n        self.add(finish_points)\n        for dot in starting_points:\n            self.add(TracedPath(dot.get_center, stroke_color=dot.get_color()))\n\n        self.wait()\n        self.play(\n            Transform(\n                starting_points,\n                finish_points,\n                path_func=utils.paths.clockwise_path(),\n                run_time=2,\n            )\n        )\n        self.wait()", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.utils.paths.html", "original_name": "paths "}}
{"prompt": "Demonstrate the plotting of various rate functions in a grid layout with titles.", "response": "from manim import *\n\nclass RateFuncExample(Scene):\n    def construct(self):\n        x = VGroup()\n        for k, v in rate_functions.__dict__.items():\n            if \"function\" in str(v):\n                if (\n                    not k.startswith(\"__\")\n                    and not k.startswith(\"sqrt\")\n                    and not k.startswith(\"bezier\")\n                ):\n                    try:\n                        rate_func = v\n                        plot = (\n                            ParametricFunction(\n                                lambda x: [x, rate_func(x), 0],\n                                t_range=[0, 1, .01],\n                                use_smoothing=False,\n                                color=YELLOW,\n                            )\n                            .stretch_to_fit_width(1.5)\n                            .stretch_to_fit_height(1)\n                        )\n                        plot_bg = SurroundingRectangle(plot).set_color(WHITE)\n                        plot_title = (\n                            Text(rate_func.__name__, weight=BOLD)\n                            .scale(0.5)\n                            .next_to(plot_bg, UP, buff=0.1)\n                        )\n                        x.add(VGroup(plot_bg, plot, plot_title))\n                    except: # because functions `not_quite_there`, `function squish_rate_func` are not working.\n                        pass\n        x.arrange_in_grid(cols=8)\n        x.height = config.frame_height\n        x.width = config.frame_width\n        x.move_to(ORIGIN).scale(0.95)\n        self.add(x)", "metadata": {"source": "https://docs.manim.community/en/stable/reference/manim.utils.rate_functions.html", "original_name": "rate_functions "}}
